/* automatically generated by rust-bindgen */

pub const IPP_PI: f64 = 3.141592653589793;
pub const IPP_2PI: f64 = 6.283185307179586;
pub const IPP_PI2: f64 = 1.5707963267948966;
pub const IPP_PI4: f64 = 0.7853981633974483;
pub const IPP_PI180: f64 = 0.017453292519943295;
pub const IPP_RPI: f64 = 0.3183098861837907;
pub const IPP_SQRT2: f64 = 1.4142135623730951;
pub const IPP_SQRT3: f64 = 1.7320508075688772;
pub const IPP_LN2: f64 = 0.6931471805599453;
pub const IPP_LN3: f64 = 1.0986122886681098;
pub const IPP_E: f64 = 2.718281828459045;
pub const IPP_RE: f64 = 0.36787944117144233;
pub const IPP_MAX_8U: u32 = 255;
pub const IPP_MAX_16U: u32 = 65535;
pub const IPP_MAX_32U: u32 = 4294967295;
pub const IPP_MIN_8U: u32 = 0;
pub const IPP_MIN_16U: u32 = 0;
pub const IPP_MIN_32U: u32 = 0;
pub const IPP_MIN_8S: i32 = -128;
pub const IPP_MAX_8S: u32 = 127;
pub const IPP_MIN_16S: i32 = -32768;
pub const IPP_MAX_16S: u32 = 32767;
pub const IPP_MIN_32S: i32 = -2147483648;
pub const IPP_MAX_32S: u32 = 2147483647;
pub const IPP_MIN_64U: u32 = 0;
pub const IPP_MAX_64S: u64 = 9223372036854775807;
pub const IPP_MIN_64S: i64 = -9223372036854775808;
pub const IPP_MAX_64U: i32 = -1;
pub const ippCPUID_MMX: u32 = 1;
pub const ippCPUID_SSE: u32 = 2;
pub const ippCPUID_SSE2: u32 = 4;
pub const ippCPUID_SSE3: u32 = 8;
pub const ippCPUID_SSSE3: u32 = 16;
pub const ippCPUID_MOVBE: u32 = 32;
pub const ippCPUID_SSE41: u32 = 64;
pub const ippCPUID_SSE42: u32 = 128;
pub const ippCPUID_AVX: u32 = 256;
pub const ippAVX_ENABLEDBYOS: u32 = 512;
pub const ippCPUID_AES: u32 = 1024;
pub const ippCPUID_CLMUL: u32 = 2048;
pub const ippCPUID_ABR: u32 = 4096;
pub const ippCPUID_RDRAND: u32 = 8192;
pub const ippCPUID_F16C: u32 = 16384;
pub const ippCPUID_AVX2: u32 = 32768;
pub const ippCPUID_ADCOX: u32 = 65536;
pub const ippCPUID_RDSEED: u32 = 131072;
pub const ippCPUID_PREFETCHW: u32 = 262144;
pub const ippCPUID_SHA: u32 = 524288;
pub const ippCPUID_AVX512F: u32 = 1048576;
pub const ippCPUID_AVX512CD: u32 = 2097152;
pub const ippCPUID_AVX512ER: u32 = 4194304;
pub const ippCPUID_AVX512PF: u32 = 8388608;
pub const ippCPUID_AVX512BW: u32 = 16777216;
pub const ippCPUID_AVX512DQ: u32 = 33554432;
pub const ippCPUID_AVX512VL: u32 = 67108864;
pub const ippCPUID_AVX512VBMI: u32 = 134217728;
pub const ippCPUID_MPX: u32 = 268435456;
pub const ippCPUID_AVX512_4FMADDPS: u32 = 536870912;
pub const ippCPUID_AVX512_4VNNIW: u32 = 1073741824;
pub const ippCPUID_KNC: u32 = 2147483648;
pub const ippStsCpuNotSupportedErr: i32 = -9999;
pub const ippStsUnknownStatusCodeErr: i32 = -216;
pub const ippStsLoadDynErr: i32 = -221;
pub const ippStsLengthErr: i32 = -15;
pub const ippStsNotSupportedModeErr: i32 = -14;
pub const ippStsContextMatchErr: i32 = -13;
pub const ippStsScaleRangeErr: i32 = -12;
pub const ippStsOutOfRangeErr: i32 = -11;
pub const ippStsDivByZeroErr: i32 = -10;
pub const ippStsMemAllocErr: i32 = -9;
pub const ippStsNullPtrErr: i32 = -8;
pub const ippStsRangeErr: i32 = -7;
pub const ippStsSizeErr: i32 = -6;
pub const ippStsBadArgErr: i32 = -5;
pub const ippStsNoMemErr: i32 = -4;
pub const ippStsErr: i32 = -2;
pub const ippStsNoErr: u32 = 0;
pub const ippStsNoOperation: u32 = 1;
pub const ippStsDivByZero: u32 = 2;
pub const ippStsWaterfall: u32 = 43;
pub const ippStsFeaturesCombination: u32 = 51;
pub const ippStsQuadraticNonResidueErr: i32 = -1016;
pub const ippStsPointAtInfinity: i32 = -1015;
pub const ippStsOFBSizeErr: i32 = -1014;
pub const ippStsIncompleteContextErr: i32 = -1013;
pub const ippStsCTRSizeErr: i32 = -1012;
pub const ippStsEphemeralKeyErr: i32 = -1011;
pub const ippStsMessageErr: i32 = -1010;
pub const ippStsShareKeyErr: i32 = -1009;
pub const ippStsIvalidPrivateKey: i32 = -1008;
pub const ippStsOutOfECErr: i32 = -1007;
pub const ippStsECCInvalidFlagErr: i32 = -1006;
pub const ippStsUnderRunErr: i32 = -1005;
pub const ippStsPaddingErr: i32 = -1004;
pub const ippStsCFBSizeErr: i32 = -1003;
pub const ippStsPaddingSchemeErr: i32 = -1002;
pub const ippStsBadModulusErr: i32 = -1001;
pub const ippStsInsufficientEntropy: u32 = 25;
pub const ippStsNotSupportedCpu: u32 = 36;
pub const DES_BLOCKSIZE: u32 = 64;
pub const TDES_BLOCKSIZE: u32 = 64;
pub const DES_KEYSIZE: u32 = 64;
pub const TDES_KEYSIZE: u32 = 64;
pub const IPP_AES_BLOCK_BITSIZE: u32 = 128;
pub const IPP_ARCFOUR_KEYMAX_SIZE: u32 = 256;
pub const MAX_ARCFOUR_KEY_LEN: u32 = 256;
pub const IPP_SHA1_DIGEST_BITSIZE: u32 = 160;
pub const IPP_SHA256_DIGEST_BITSIZE: u32 = 256;
pub const IPP_SHA224_DIGEST_BITSIZE: u32 = 224;
pub const IPP_SHA384_DIGEST_BITSIZE: u32 = 384;
pub const IPP_SHA512_DIGEST_BITSIZE: u32 = 512;
pub const IPP_MD5_DIGEST_BITSIZE: u32 = 128;
pub const IPP_SM3_DIGEST_BITSIZE: u32 = 256;
pub const IPP_SHA512_224_DIGEST_BITSIZE: u32 = 224;
pub const IPP_SHA512_256_DIGEST_BITSIZE: u32 = 256;
pub const BN_MAXBITSIZE: u32 = 16384;
pub const IPP_IS_EQ: u32 = 0;
pub const IPP_IS_GT: u32 = 1;
pub const IPP_IS_LT: u32 = 2;
pub const IPP_IS_NE: u32 = 3;
pub const IPP_IS_NA: u32 = 4;
pub const IPP_IS_PRIME: u32 = 5;
pub const IPP_IS_COMPOSITE: u32 = 6;
pub const IPP_IS_VALID: u32 = 7;
pub const IPP_IS_INVALID: u32 = 8;
pub const IPP_IS_INCOMPLETE: u32 = 9;
pub const IPP_IS_ATINFINITY: u32 = 10;
pub const IS_ZERO: u32 = 0;
pub const GREATER_THAN_ZERO: u32 = 1;
pub const LESS_THAN_ZERO: u32 = 2;
pub const IS_PRIME: u32 = 5;
pub const IS_COMPOSITE: u32 = 6;
pub const IS_VALID_KEY: u32 = 7;
pub const IS_INVALID_KEY: u32 = 8;
pub const IS_INCOMPLETED_KEY: u32 = 9;
pub const MIN_RSA_SIZE: u32 = 8;
pub const MAX_RSA_SIZE: u32 = 16384;
pub const MIN_DLP_BITSIZE: u32 = 512;
pub const MIN_DLP_BITSIZER: u32 = 160;
pub const MIN_DLPDH_BITSIZE: u32 = 512;
pub const MIN_DLPDH_BITSIZER: u32 = 160;
pub const DEF_DLPDH_BITSIZER: u32 = 160;
pub const MIN_DLPDSA_BITSIZE: u32 = 512;
pub const MAX_DLPDSA_BITSIZE: u32 = 1024;
pub const MIN_DLPDSA_BITSIZER: u32 = 160;
pub const DEF_DLPDSA_BITSIZER: u32 = 160;
pub const MAX_DLPDSA_BITSIZER: u32 = 160;
pub const MIN_DLPDSA_SEEDSIZE: u32 = 160;
pub const EC_GFP_MAXBITSIZE: u32 = 1024;
pub const IPP_MIN_GF_CHAR: u32 = 3;
pub const IPP_MIN_GF_BITSIZE: u32 = 2;
pub const IPP_MAX_GF_BITSIZE: u32 = 1024;
pub const IPP_MIN_GF_EXTDEG: u32 = 2;
pub const IPP_MAX_GF_EXTDEG: u32 = 8;
pub const IPP_MAX_EXPONENT_NUM: u32 = 6;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct IppLibraryVersion {
    pub major: ::std::os::raw::c_int,
    pub minor: ::std::os::raw::c_int,
    pub majorBuild: ::std::os::raw::c_int,
    pub build: ::std::os::raw::c_int,
    pub targetCpu: [::std::os::raw::c_char; 4usize],
    pub Name: *const ::std::os::raw::c_char,
    pub Version: *const ::std::os::raw::c_char,
    pub BuildDate: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_IppLibraryVersion() {
    assert_eq!(
        ::std::mem::size_of::<IppLibraryVersion>(),
        48usize,
        concat!("Size of: ", stringify!(IppLibraryVersion))
    );
    assert_eq!(
        ::std::mem::align_of::<IppLibraryVersion>(),
        8usize,
        concat!("Alignment of ", stringify!(IppLibraryVersion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IppLibraryVersion>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IppLibraryVersion),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IppLibraryVersion>())).minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IppLibraryVersion),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IppLibraryVersion>())).majorBuild as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IppLibraryVersion),
            "::",
            stringify!(majorBuild)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IppLibraryVersion>())).build as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(IppLibraryVersion),
            "::",
            stringify!(build)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IppLibraryVersion>())).targetCpu as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IppLibraryVersion),
            "::",
            stringify!(targetCpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IppLibraryVersion>())).Name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IppLibraryVersion),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IppLibraryVersion>())).Version as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IppLibraryVersion),
            "::",
            stringify!(Version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IppLibraryVersion>())).BuildDate as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IppLibraryVersion),
            "::",
            stringify!(BuildDate)
        )
    );
}
pub type Ipp8u = ::std::os::raw::c_uchar;
pub type Ipp16u = ::std::os::raw::c_ushort;
pub type Ipp32u = ::std::os::raw::c_uint;
pub type Ipp8s = ::std::os::raw::c_schar;
pub type Ipp16s = ::std::os::raw::c_short;
pub type Ipp32s = ::std::os::raw::c_int;
pub type Ipp32f = f32;
pub type Ipp64s = ::std::os::raw::c_longlong;
pub type Ipp64u = ::std::os::raw::c_ulonglong;
pub type Ipp64f = f64;
pub type Ipp16f = Ipp16s;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct Ipp8sc {
    pub re: Ipp8s,
    pub im: Ipp8s,
}
#[test]
fn bindgen_test_layout_Ipp8sc() {
    assert_eq!(
        ::std::mem::size_of::<Ipp8sc>(),
        2usize,
        concat!("Size of: ", stringify!(Ipp8sc))
    );
    assert_eq!(
        ::std::mem::align_of::<Ipp8sc>(),
        1usize,
        concat!("Alignment of ", stringify!(Ipp8sc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Ipp8sc>())).re as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Ipp8sc),
            "::",
            stringify!(re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Ipp8sc>())).im as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(Ipp8sc),
            "::",
            stringify!(im)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct Ipp16sc {
    pub re: Ipp16s,
    pub im: Ipp16s,
}
#[test]
fn bindgen_test_layout_Ipp16sc() {
    assert_eq!(
        ::std::mem::size_of::<Ipp16sc>(),
        4usize,
        concat!("Size of: ", stringify!(Ipp16sc))
    );
    assert_eq!(
        ::std::mem::align_of::<Ipp16sc>(),
        2usize,
        concat!("Alignment of ", stringify!(Ipp16sc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Ipp16sc>())).re as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Ipp16sc),
            "::",
            stringify!(re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Ipp16sc>())).im as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Ipp16sc),
            "::",
            stringify!(im)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct Ipp16uc {
    pub re: Ipp16u,
    pub im: Ipp16u,
}
#[test]
fn bindgen_test_layout_Ipp16uc() {
    assert_eq!(
        ::std::mem::size_of::<Ipp16uc>(),
        4usize,
        concat!("Size of: ", stringify!(Ipp16uc))
    );
    assert_eq!(
        ::std::mem::align_of::<Ipp16uc>(),
        2usize,
        concat!("Alignment of ", stringify!(Ipp16uc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Ipp16uc>())).re as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Ipp16uc),
            "::",
            stringify!(re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Ipp16uc>())).im as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Ipp16uc),
            "::",
            stringify!(im)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct Ipp32sc {
    pub re: Ipp32s,
    pub im: Ipp32s,
}
#[test]
fn bindgen_test_layout_Ipp32sc() {
    assert_eq!(
        ::std::mem::size_of::<Ipp32sc>(),
        8usize,
        concat!("Size of: ", stringify!(Ipp32sc))
    );
    assert_eq!(
        ::std::mem::align_of::<Ipp32sc>(),
        4usize,
        concat!("Alignment of ", stringify!(Ipp32sc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Ipp32sc>())).re as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Ipp32sc),
            "::",
            stringify!(re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Ipp32sc>())).im as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Ipp32sc),
            "::",
            stringify!(im)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct Ipp32fc {
    pub re: Ipp32f,
    pub im: Ipp32f,
}
#[test]
fn bindgen_test_layout_Ipp32fc() {
    assert_eq!(
        ::std::mem::size_of::<Ipp32fc>(),
        8usize,
        concat!("Size of: ", stringify!(Ipp32fc))
    );
    assert_eq!(
        ::std::mem::align_of::<Ipp32fc>(),
        4usize,
        concat!("Alignment of ", stringify!(Ipp32fc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Ipp32fc>())).re as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Ipp32fc),
            "::",
            stringify!(re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Ipp32fc>())).im as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Ipp32fc),
            "::",
            stringify!(im)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct Ipp64sc {
    pub re: Ipp64s,
    pub im: Ipp64s,
}
#[test]
fn bindgen_test_layout_Ipp64sc() {
    assert_eq!(
        ::std::mem::size_of::<Ipp64sc>(),
        16usize,
        concat!("Size of: ", stringify!(Ipp64sc))
    );
    assert_eq!(
        ::std::mem::align_of::<Ipp64sc>(),
        8usize,
        concat!("Alignment of ", stringify!(Ipp64sc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Ipp64sc>())).re as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Ipp64sc),
            "::",
            stringify!(re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Ipp64sc>())).im as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Ipp64sc),
            "::",
            stringify!(im)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct Ipp64fc {
    pub re: Ipp64f,
    pub im: Ipp64f,
}
#[test]
fn bindgen_test_layout_Ipp64fc() {
    assert_eq!(
        ::std::mem::size_of::<Ipp64fc>(),
        16usize,
        concat!("Size of: ", stringify!(Ipp64fc))
    );
    assert_eq!(
        ::std::mem::align_of::<Ipp64fc>(),
        8usize,
        concat!("Alignment of ", stringify!(Ipp64fc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Ipp64fc>())).re as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Ipp64fc),
            "::",
            stringify!(re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Ipp64fc>())).im as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Ipp64fc),
            "::",
            stringify!(im)
        )
    );
}
pub mod IppDataType {
    pub type Type = i32;
    pub const ippUndef: Type = -1;
    pub const ipp1u: Type = 0;
    pub const ipp8u: Type = 1;
    pub const ipp8uc: Type = 2;
    pub const ipp8s: Type = 3;
    pub const ipp8sc: Type = 4;
    pub const ipp16u: Type = 5;
    pub const ipp16uc: Type = 6;
    pub const ipp16s: Type = 7;
    pub const ipp16sc: Type = 8;
    pub const ipp32u: Type = 9;
    pub const ipp32uc: Type = 10;
    pub const ipp32s: Type = 11;
    pub const ipp32sc: Type = 12;
    pub const ipp32f: Type = 13;
    pub const ipp32fc: Type = 14;
    pub const ipp64u: Type = 15;
    pub const ipp64uc: Type = 16;
    pub const ipp64s: Type = 17;
    pub const ipp64sc: Type = 18;
    pub const ipp64f: Type = 19;
    pub const ipp64fc: Type = 20;
}
pub mod IppBool {
    pub type Type = u32;
    pub const ippFalse: Type = 0;
    pub const ippTrue: Type = 1;
}
pub type IppStatus = ::std::os::raw::c_int;
pub type IppAlgId = Ipp32u;
pub mod IppsPadding {
    pub type Type = u32;
    pub const ippPaddingNONE: Type = 0;
    pub const IppsCPPaddingNONE: Type = 0;
    pub const ippPaddingPKCS7: Type = 1;
    pub const IppsCPPaddingPKCS7: Type = 1;
    pub const ippPaddingZEROS: Type = 2;
    pub const IppsCPPaddingZEROS: Type = 2;
}
pub use self::IppsPadding::Type as IppsCPPadding;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpDES {
    _unused: [u8; 0],
}
pub type IppsDESSpec = _cpDES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpRijndael128 {
    _unused: [u8; 0],
}
pub type IppsAESSpec = _cpRijndael128;
pub type IppsRijndael128Spec = _cpRijndael128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpSMS4 {
    _unused: [u8; 0],
}
pub type IppsSMS4Spec = _cpSMS4;
pub mod IppsRijndaelKeyLength {
    pub type Type = u32;
    pub const ippRijndaelKey128: Type = 128;
    pub const IppsRijndaelKey128: Type = 128;
    pub const ippRijndaelKey192: Type = 192;
    pub const IppsRijndaelKey192: Type = 192;
    pub const ippRijndaelKey256: Type = 256;
    pub const IppsRijndaelKey256: Type = 256;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpAES_CCM {
    _unused: [u8; 0],
}
pub type IppsAES_CCMState = _cpAES_CCM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpAES_GCM {
    _unused: [u8; 0],
}
pub type IppsAES_GCMState = _cpAES_GCM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpAES_XTS {
    _unused: [u8; 0],
}
pub type IppsAES_XTSSpec = _cpAES_XTS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpSMS4_CCM {
    _unused: [u8; 0],
}
pub type IppsSMS4_CCMState = _cpSMS4_CCM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpARCfour {
    _unused: [u8; 0],
}
pub type IppsARCFourState = _cpARCfour;
pub mod IppHashAlgId {
    pub type Type = u32;
    pub const ippHashAlg_Unknown: Type = 0;
    pub const ippHashAlg_SHA1: Type = 1;
    pub const ippHashAlg_SHA256: Type = 2;
    pub const ippHashAlg_SHA224: Type = 3;
    pub const ippHashAlg_SHA512: Type = 4;
    pub const ippHashAlg_SHA384: Type = 5;
    pub const ippHashAlg_MD5: Type = 6;
    pub const ippHashAlg_SM3: Type = 7;
    pub const ippHashAlg_SHA512_224: Type = 8;
    pub const ippHashAlg_SHA512_256: Type = 9;
    pub const ippHashAlg_MaxNo: Type = 10;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpSHA1 {
    _unused: [u8; 0],
}
pub type IppsSHA1State = _cpSHA1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpSHA256 {
    _unused: [u8; 0],
}
pub type IppsSHA256State = _cpSHA256;
pub type IppsSHA224State = _cpSHA256;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpSHA512 {
    _unused: [u8; 0],
}
pub type IppsSHA512State = _cpSHA512;
pub type IppsSHA384State = _cpSHA512;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpMD5 {
    _unused: [u8; 0],
}
pub type IppsMD5State = _cpMD5;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpSM3 {
    _unused: [u8; 0],
}
pub type IppsSM3State = _cpSM3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpHashCtx {
    _unused: [u8; 0],
}
pub type IppsHashState = _cpHashCtx;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpHashMethod_rmf {
    _unused: [u8; 0],
}
pub type IppsHashMethod = _cpHashMethod_rmf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpHashCtx_rmf {
    _unused: [u8; 0],
}
pub type IppsHashState_rmf = _cpHashCtx_rmf;
pub type IppMGF = ::std::option::Option<
    unsafe extern "C" fn(
        pSeed: *const Ipp8u,
        seedLen: ::std::os::raw::c_int,
        pMask: *mut Ipp8u,
        maskLen: ::std::os::raw::c_int,
    ) -> IppStatus,
>;
pub type IppHASH = ::std::option::Option<
    unsafe extern "C" fn(
        pMsg: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pMD: *mut Ipp8u,
    ) -> IppStatus,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpHMAC {
    _unused: [u8; 0],
}
pub type IppsHMACState = _cpHMAC;
pub type IppsHMACSHA1State = _cpHMAC;
pub type IppsHMACSHA256State = _cpHMAC;
pub type IppsHMACSHA224State = _cpHMAC;
pub type IppsHMACSHA384State = _cpHMAC;
pub type IppsHMACSHA512State = _cpHMAC;
pub type IppsHMACMD5State = _cpHMAC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpHMAC_rmf {
    _unused: [u8; 0],
}
pub type IppsHMACState_rmf = _cpHMAC_rmf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpAES_CMAC {
    _unused: [u8; 0],
}
pub type IppsAES_CMACState = _cpAES_CMAC;
pub mod IppsBigNumSGN {
    pub type Type = u32;
    pub const ippBigNumNEG: Type = 0;
    pub const IppsBigNumNEG: Type = 0;
    pub const ippBigNumPOS: Type = 1;
    pub const IppsBigNumPOS: Type = 1;
}
pub mod IppsExpMethod {
    pub type Type = u32;
    pub const ippBinaryMethod: Type = 0;
    pub const IppsBinaryMethod: Type = 0;
    pub const ippSlidingWindows: Type = 1;
    pub const IppsSlidingWindows: Type = 1;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpBigNum {
    _unused: [u8; 0],
}
pub type IppsBigNumState = _cpBigNum;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpMontgomery {
    _unused: [u8; 0],
}
pub type IppsMontState = _cpMontgomery;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpPRNG {
    _unused: [u8; 0],
}
pub type IppsPRNGState = _cpPRNG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpPrime {
    _unused: [u8; 0],
}
pub type IppsPrimeState = _cpPrime;
pub type IppBitSupplier = ::std::option::Option<
    unsafe extern "C" fn(
        pRand: *mut Ipp32u,
        nBits: ::std::os::raw::c_int,
        pEbsParams: *mut ::std::os::raw::c_void,
    ) -> IppStatus,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpRSA {
    _unused: [u8; 0],
}
pub type IppsRSAState = _cpRSA;
pub mod IppRSAKeyType {
    pub type Type = u32;
    pub const ippRSApublic: Type = 536870912;
    pub const IppRSApublic: Type = 536870912;
    pub const ippRSAprivate: Type = 1073741824;
    pub const IppRSAprivate: Type = 1073741824;
}
pub mod IppRSAKeyTag {
    pub type Type = u32;
    pub const ippRSAkeyN: Type = 1;
    pub const IppRSAkeyN: Type = 1;
    pub const ippRSAkeyE: Type = 2;
    pub const IppRSAkeyE: Type = 2;
    pub const ippRSAkeyD: Type = 4;
    pub const IppRSAkeyD: Type = 4;
    pub const ippRSAkeyP: Type = 8;
    pub const IppRSAkeyP: Type = 8;
    pub const ippRSAkeyQ: Type = 16;
    pub const IppRSAkeyQ: Type = 16;
    pub const ippRSAkeyDp: Type = 32;
    pub const IppRSAkeyDp: Type = 32;
    pub const ippRSAkeyDq: Type = 64;
    pub const IppRSAkeyDq: Type = 64;
    pub const ippRSAkeyQinv: Type = 128;
    pub const IppRSAkeyQinv: Type = 128;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpRSA_public_key {
    _unused: [u8; 0],
}
pub type IppsRSAPublicKeyState = _cpRSA_public_key;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpRSA_private_key {
    _unused: [u8; 0],
}
pub type IppsRSAPrivateKeyState = _cpRSA_private_key;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpDLP {
    _unused: [u8; 0],
}
pub type IppsDLPState = _cpDLP;
pub mod IppDLPKeyTag {
    pub type Type = u32;
    pub const ippDLPkeyP: Type = 1;
    pub const IppDLPkeyP: Type = 1;
    pub const ippDLPkeyR: Type = 2;
    pub const IppDLPkeyR: Type = 2;
    pub const ippDLPkeyG: Type = 4;
    pub const IppDLPkeyG: Type = 4;
}
pub mod IppDLResult {
    pub type Type = u32;
    pub const ippDLValid: Type = 0;
    pub const ippDLBaseIsEven: Type = 1;
    pub const ippDLOrderIsEven: Type = 2;
    pub const ippDLInvalidBaseRange: Type = 3;
    pub const ippDLInvalidOrderRange: Type = 4;
    pub const ippDLCompositeBase: Type = 5;
    pub const ippDLCompositeOrder: Type = 6;
    pub const ippDLInvalidCofactor: Type = 7;
    pub const ippDLInvalidGenerator: Type = 8;
    pub const ippDLInvalidPrivateKey: Type = 9;
    pub const ippDLInvalidPublicKey: Type = 10;
    pub const ippDLInvalidKeyPair: Type = 11;
    pub const ippDLInvalidSignature: Type = 12;
}
pub mod IppECResult {
    pub type Type = u32;
    pub const ippECValid: Type = 0;
    pub const ippECCompositeBase: Type = 1;
    pub const ippECComplicatedBase: Type = 2;
    pub const ippECIsZeroDiscriminant: Type = 3;
    pub const ippECCompositeOrder: Type = 4;
    pub const ippECInvalidOrder: Type = 5;
    pub const ippECIsWeakMOV: Type = 6;
    pub const ippECIsWeakSSSA: Type = 7;
    pub const ippECIsSupersingular: Type = 8;
    pub const ippECInvalidPrivateKey: Type = 9;
    pub const ippECInvalidPublicKey: Type = 10;
    pub const ippECInvalidKeyPair: Type = 11;
    pub const ippECPointOutOfGroup: Type = 12;
    pub const ippECPointIsAtInfinite: Type = 13;
    pub const ippECPointIsNotValid: Type = 14;
    pub const ippECPointIsEqual: Type = 15;
    pub const ippECPointIsNotEqual: Type = 16;
    pub const ippECInvalidSignature: Type = 17;
}
pub mod IppsECType {
    pub type Type = u32;
    pub const ippECarbitrary: Type = 0;
    pub const IppECCArbitrary: Type = 0;
    pub const ippECPstd: Type = 65536;
    pub const IppECCPStd: Type = 65536;
    pub const ippECPstd112r1: Type = 65536;
    pub const IppECCPStd112r1: Type = 65536;
    pub const ippECPstd112r2: Type = 65537;
    pub const IppECCPStd112r2: Type = 65537;
    pub const ippECPstd128r1: Type = 65538;
    pub const IppECCPStd128r1: Type = 65538;
    pub const ippECPstd128r2: Type = 65539;
    pub const IppECCPStd128r2: Type = 65539;
    pub const ippECPstd160r1: Type = 65540;
    pub const IppECCPStd160r1: Type = 65540;
    pub const ippECPstd160r2: Type = 65541;
    pub const IppECCPStd160r2: Type = 65541;
    pub const ippECPstd192r1: Type = 65542;
    pub const IppECCPStd192r1: Type = 65542;
    pub const ippECPstd224r1: Type = 65543;
    pub const IppECCPStd224r1: Type = 65543;
    pub const ippECPstd256r1: Type = 65544;
    pub const IppECCPStd256r1: Type = 65544;
    pub const ippECPstd384r1: Type = 65545;
    pub const IppECCPStd384r1: Type = 65545;
    pub const ippECPstd521r1: Type = 65546;
    pub const IppECCPStd521r1: Type = 65546;
    pub const ippECPstdSM2: Type = 65547;
    pub const IppECCPStdSM2: Type = 65547;
    pub const ippEC_TPM_SM2_P256: Type = 65547;
    pub const ippEC_TPM_BN_P256: Type = 65548;
    pub const IppECCBStd: Type = 131072;
    pub const IppECCBStd113r1: Type = 131072;
    pub const IppECCBStd113r2: Type = 131073;
    pub const IppECCBStd131r1: Type = 131074;
    pub const IppECCBStd131r2: Type = 131075;
    pub const IppECCBStd163r1: Type = 131076;
    pub const IppECCBStd163r2: Type = 131077;
    pub const IppECCBStd193r1: Type = 131078;
    pub const IppECCBStd193r2: Type = 131079;
    pub const IppECCBStd233r1: Type = 131080;
    pub const IppECCBStd283r1: Type = 131081;
    pub const IppECCBStd409r1: Type = 131082;
    pub const IppECCBStd571r1: Type = 131083;
    pub const IppECCKStd: Type = 262144;
    pub const IppECCBStd163k1: Type = 262144;
    pub const IppECCBStd233k1: Type = 262145;
    pub const IppECCBStd239k1: Type = 262146;
    pub const IppECCBStd283k1: Type = 262147;
    pub const IppECCBStd409k1: Type = 262148;
    pub const IppECCBStd571k1: Type = 262149;
}
pub use self::IppsECType::Type as IppECCType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpGFpMethod {
    _unused: [u8; 0],
}
pub type IppsGFpMethod = _cpGFpMethod;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpGFp {
    _unused: [u8; 0],
}
pub type IppsGFpState = _cpGFp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpGFpElement {
    _unused: [u8; 0],
}
pub type IppsGFpElement = _cpGFpElement;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpGFpEC {
    _unused: [u8; 0],
}
pub type IppsGFpECState = _cpGFpEC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpGFpECPoint {
    _unused: [u8; 0],
}
pub type IppsGFpECPoint = _cpGFpECPoint;
pub type IppsECCPState = _cpGFpEC;
pub type IppsECCPPointState = _cpGFpECPoint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct IppsHashInfo {
    pub hashSize: ::std::os::raw::c_int,
    pub msgBlockSize: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_IppsHashInfo() {
    assert_eq!(
        ::std::mem::size_of::<IppsHashInfo>(),
        8usize,
        concat!("Size of: ", stringify!(IppsHashInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<IppsHashInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(IppsHashInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IppsHashInfo>())).hashSize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IppsHashInfo),
            "::",
            stringify!(hashSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IppsHashInfo>())).msgBlockSize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IppsHashInfo),
            "::",
            stringify!(msgBlockSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct IppsGFpInfo {
    pub parentGFdegree: ::std::os::raw::c_int,
    pub basicGFdegree: ::std::os::raw::c_int,
    pub basicElmBitSize: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_IppsGFpInfo() {
    assert_eq!(
        ::std::mem::size_of::<IppsGFpInfo>(),
        12usize,
        concat!("Size of: ", stringify!(IppsGFpInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<IppsGFpInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(IppsGFpInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IppsGFpInfo>())).parentGFdegree as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IppsGFpInfo),
            "::",
            stringify!(parentGFdegree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IppsGFpInfo>())).basicGFdegree as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IppsGFpInfo),
            "::",
            stringify!(basicGFdegree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IppsGFpInfo>())).basicElmBitSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IppsGFpInfo),
            "::",
            stringify!(basicElmBitSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpStateECES_SM2 {
    _unused: [u8; 0],
}
pub type IppsECESState_SM2 = _cpStateECES_SM2;
extern "C" {
    pub fn ippcpGetCpuFeatures(pFeaturesMask: *mut Ipp64u) -> IppStatus;
}
extern "C" {
    pub fn ippcpSetCpuFeatures(features: Ipp64u) -> IppStatus;
}
extern "C" {
    pub fn ippcpGetEnabledCpuFeatures() -> Ipp64u;
}
extern "C" {
    pub fn ippcpSetNumThreads(numThr: ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippcpInit() -> IppStatus;
}
extern "C" {
    pub fn ippcpGetNumThreads(pNumThr: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippcpGetStatusString(StsCode: IppStatus) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ippcpGetEnabledNumThreads() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ippcpGetCpuClocks() -> Ipp64u;
}
extern "C" {
    pub fn ippcpGetLibVersion() -> *const IppLibraryVersion;
}
extern "C" {
    pub fn ippsDESGetSize(size: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsDESInit(pKey: *const Ipp8u, pCtx: *mut IppsDESSpec) -> IppStatus;
}
extern "C" {
    pub fn ippsDESPack(pCtx: *const IppsDESSpec, pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDESUnpack(pBuffer: *const Ipp8u, pCtx: *mut IppsDESSpec) -> IppStatus;
}
extern "C" {
    pub fn ippsTDESEncryptECB(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx1: *const IppsDESSpec,
        pCtx2: *const IppsDESSpec,
        pCtx3: *const IppsDESSpec,
        padding: IppsCPPadding,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsTDESDecryptECB(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx1: *const IppsDESSpec,
        pCtx2: *const IppsDESSpec,
        pCtx3: *const IppsDESSpec,
        padding: IppsCPPadding,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsTDESEncryptCBC(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx1: *const IppsDESSpec,
        pCtx2: *const IppsDESSpec,
        pCtx3: *const IppsDESSpec,
        pIV: *const Ipp8u,
        padding: IppsCPPadding,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsTDESDecryptCBC(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx1: *const IppsDESSpec,
        pCtx2: *const IppsDESSpec,
        pCtx3: *const IppsDESSpec,
        pIV: *const Ipp8u,
        padding: IppsCPPadding,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsTDESEncryptCFB(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        cfbBlkSize: ::std::os::raw::c_int,
        pCtx1: *const IppsDESSpec,
        pCtx2: *const IppsDESSpec,
        pCtx3: *const IppsDESSpec,
        pIV: *const Ipp8u,
        padding: IppsCPPadding,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsTDESDecryptCFB(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        cfbBlkSize: ::std::os::raw::c_int,
        pCtx1: *const IppsDESSpec,
        pCtx2: *const IppsDESSpec,
        pCtx3: *const IppsDESSpec,
        pIV: *const Ipp8u,
        padding: IppsCPPadding,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsTDESEncryptOFB(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        ofbBlkSize: ::std::os::raw::c_int,
        pCtx1: *const IppsDESSpec,
        pCtx2: *const IppsDESSpec,
        pCtx3: *const IppsDESSpec,
        pIV: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsTDESDecryptOFB(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        ofbBlkSize: ::std::os::raw::c_int,
        pCtx1: *const IppsDESSpec,
        pCtx2: *const IppsDESSpec,
        pCtx3: *const IppsDESSpec,
        pIV: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsTDESEncryptCTR(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx1: *const IppsDESSpec,
        pCtx2: *const IppsDESSpec,
        pCtx3: *const IppsDESSpec,
        pCtrValue: *mut Ipp8u,
        ctrNumBitSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsTDESDecryptCTR(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx1: *const IppsDESSpec,
        pCtx2: *const IppsDESSpec,
        pCtx3: *const IppsDESSpec,
        pCtrValue: *mut Ipp8u,
        ctrNumBitSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESGetSize(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAESInit(
        pKey: *const Ipp8u,
        keyLen: ::std::os::raw::c_int,
        pCtx: *mut IppsAESSpec,
        ctxSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESSetKey(
        pKey: *const Ipp8u,
        keyLen: ::std::os::raw::c_int,
        pCtx: *mut IppsAESSpec,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESPack(
        pCtx: *const IppsAESSpec,
        pBuffer: *mut Ipp8u,
        bufSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESUnpack(
        pBuffer: *const Ipp8u,
        pCtx: *mut IppsAESSpec,
        ctxSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESEncryptECB(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsAESSpec,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESDecryptECB(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsAESSpec,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESEncryptCBC(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsAESSpec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESEncryptCBC_CS1(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsAESSpec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESEncryptCBC_CS2(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsAESSpec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESEncryptCBC_CS3(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsAESSpec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESDecryptCBC(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsAESSpec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESDecryptCBC_CS1(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsAESSpec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESDecryptCBC_CS2(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsAESSpec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESDecryptCBC_CS3(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsAESSpec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESEncryptCFB(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        cfbBlkSize: ::std::os::raw::c_int,
        pCtx: *const IppsAESSpec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESDecryptCFB(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        cfbBlkSize: ::std::os::raw::c_int,
        pCtx: *const IppsAESSpec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESEncryptOFB(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        ofbBlkSize: ::std::os::raw::c_int,
        pCtx: *const IppsAESSpec,
        pIV: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESDecryptOFB(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        ofbBlkSize: ::std::os::raw::c_int,
        pCtx: *const IppsAESSpec,
        pIV: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESEncryptCTR(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsAESSpec,
        pCtrValue: *mut Ipp8u,
        ctrNumBitSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESDecryptCTR(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsAESSpec,
        pCtrValue: *mut Ipp8u,
        ctrNumBitSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESEncryptXTS_Direct(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        encBitsize: ::std::os::raw::c_int,
        aesBlkNo: ::std::os::raw::c_int,
        pTweakPT: *const Ipp8u,
        pKey: *const Ipp8u,
        keyBitsize: ::std::os::raw::c_int,
        dataUnitBitsize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAESDecryptXTS_Direct(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        encBitsize: ::std::os::raw::c_int,
        aesBlkNo: ::std::os::raw::c_int,
        pTweakPT: *const Ipp8u,
        pKey: *const Ipp8u,
        keyBitsize: ::std::os::raw::c_int,
        dataUnitBitsize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4GetSize(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4Init(
        pKey: *const Ipp8u,
        keyLen: ::std::os::raw::c_int,
        pCtx: *mut IppsSMS4Spec,
        ctxSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4SetKey(
        pKey: *const Ipp8u,
        keyLen: ::std::os::raw::c_int,
        pCtx: *mut IppsSMS4Spec,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4EncryptECB(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsSMS4Spec,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4DecryptECB(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsSMS4Spec,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4EncryptCBC(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsSMS4Spec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4EncryptCBC_CS1(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsSMS4Spec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4EncryptCBC_CS2(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsSMS4Spec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4EncryptCBC_CS3(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsSMS4Spec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4DecryptCBC(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsSMS4Spec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4DecryptCBC_CS1(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsSMS4Spec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4DecryptCBC_CS2(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsSMS4Spec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4DecryptCBC_CS3(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsSMS4Spec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4EncryptCFB(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        cfbBlkSize: ::std::os::raw::c_int,
        pCtx: *const IppsSMS4Spec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4DecryptCFB(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        cfbBlkSize: ::std::os::raw::c_int,
        pCtx: *const IppsSMS4Spec,
        pIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4EncryptOFB(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        ofbBlkSize: ::std::os::raw::c_int,
        pCtx: *const IppsSMS4Spec,
        pIV: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4DecryptOFB(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        ofbBlkSize: ::std::os::raw::c_int,
        pCtx: *const IppsSMS4Spec,
        pIV: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4EncryptCTR(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsSMS4Spec,
        pCtrValue: *mut Ipp8u,
        ctrNumBitSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4DecryptCTR(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *const IppsSMS4Spec,
        pCtrValue: *mut Ipp8u,
        ctrNumBitSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4_CCMGetSize(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4_CCMInit(
        pKey: *const Ipp8u,
        keyLen: ::std::os::raw::c_int,
        pCtx: *mut IppsSMS4_CCMState,
        ctxSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4_CCMMessageLen(msgLen: Ipp64u, pCtx: *mut IppsSMS4_CCMState) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4_CCMTagLen(
        tagLen: ::std::os::raw::c_int,
        pCtx: *mut IppsSMS4_CCMState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4_CCMStart(
        pIV: *const Ipp8u,
        ivLen: ::std::os::raw::c_int,
        pAD: *const Ipp8u,
        adLen: ::std::os::raw::c_int,
        pCtx: *mut IppsSMS4_CCMState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4_CCMEncrypt(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *mut IppsSMS4_CCMState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4_CCMDecrypt(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *mut IppsSMS4_CCMState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSMS4_CCMGetTag(
        pTag: *mut Ipp8u,
        tagLen: ::std::os::raw::c_int,
        pCtx: *const IppsSMS4_CCMState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_CCMGetSize(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_CCMInit(
        pKey: *const Ipp8u,
        keyLen: ::std::os::raw::c_int,
        pState: *mut IppsAES_CCMState,
        ctxSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_CCMMessageLen(msgLen: Ipp64u, pState: *mut IppsAES_CCMState) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_CCMTagLen(
        tagLen: ::std::os::raw::c_int,
        pState: *mut IppsAES_CCMState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_CCMStart(
        pIV: *const Ipp8u,
        ivLen: ::std::os::raw::c_int,
        pAD: *const Ipp8u,
        adLen: ::std::os::raw::c_int,
        pState: *mut IppsAES_CCMState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_CCMEncrypt(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pState: *mut IppsAES_CCMState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_CCMDecrypt(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pState: *mut IppsAES_CCMState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_CCMGetTag(
        pTag: *mut Ipp8u,
        tagLen: ::std::os::raw::c_int,
        pState: *const IppsAES_CCMState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_GCMGetSize(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_GCMInit(
        pKey: *const Ipp8u,
        keyLen: ::std::os::raw::c_int,
        pState: *mut IppsAES_GCMState,
        ctxSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_GCMReset(pState: *mut IppsAES_GCMState) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_GCMProcessIV(
        pIV: *const Ipp8u,
        ivLen: ::std::os::raw::c_int,
        pState: *mut IppsAES_GCMState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_GCMProcessAAD(
        pAAD: *const Ipp8u,
        ivAAD: ::std::os::raw::c_int,
        pState: *mut IppsAES_GCMState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_GCMStart(
        pIV: *const Ipp8u,
        ivLen: ::std::os::raw::c_int,
        pAAD: *const Ipp8u,
        aadLen: ::std::os::raw::c_int,
        pState: *mut IppsAES_GCMState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_GCMEncrypt(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pState: *mut IppsAES_GCMState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_GCMDecrypt(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pState: *mut IppsAES_GCMState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_GCMGetTag(
        pDstTag: *mut Ipp8u,
        tagLen: ::std::os::raw::c_int,
        pState: *const IppsAES_GCMState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_XTSGetSize(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_XTSInit(
        pKey: *const Ipp8u,
        keyLen: ::std::os::raw::c_int,
        duBitsize: ::std::os::raw::c_int,
        pCtx: *mut IppsAES_XTSSpec,
        ctxSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_XTSEncrypt(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        bitSizeLen: ::std::os::raw::c_int,
        pCtx: *const IppsAES_XTSSpec,
        pTweak: *const Ipp8u,
        startCipherBlkNo: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_XTSDecrypt(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        bitSizeLen: ::std::os::raw::c_int,
        pCtx: *const IppsAES_XTSSpec,
        pTweak: *const Ipp8u,
        startCipherBlkNo: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_S2V_CMAC(
        pKey: *const Ipp8u,
        keyLen: ::std::os::raw::c_int,
        pAD: *mut *const Ipp8u,
        pADlen: *const ::std::os::raw::c_int,
        numAD: ::std::os::raw::c_int,
        pV: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_SIVEncrypt(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pSIV: *mut Ipp8u,
        pAuthKey: *const Ipp8u,
        pConfKey: *const Ipp8u,
        keyLen: ::std::os::raw::c_int,
        pAD: *mut *const Ipp8u,
        pADlen: *const ::std::os::raw::c_int,
        numAD: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_SIVDecrypt(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        len: ::std::os::raw::c_int,
        pAuthPassed: *mut ::std::os::raw::c_int,
        pAuthKey: *const Ipp8u,
        pConfKey: *const Ipp8u,
        keyLen: ::std::os::raw::c_int,
        pAD: *mut *const Ipp8u,
        pADlen: *const ::std::os::raw::c_int,
        numAD: ::std::os::raw::c_int,
        pSIV: *const Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_CMACGetSize(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_CMACInit(
        pKey: *const Ipp8u,
        keyLen: ::std::os::raw::c_int,
        pState: *mut IppsAES_CMACState,
        ctxSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_CMACUpdate(
        pSrc: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pState: *mut IppsAES_CMACState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_CMACFinal(
        pMD: *mut Ipp8u,
        mdLen: ::std::os::raw::c_int,
        pState: *mut IppsAES_CMACState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAES_CMACGetTag(
        pMD: *mut Ipp8u,
        mdLen: ::std::os::raw::c_int,
        pState: *const IppsAES_CMACState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsARCFourCheckKey(
        pKey: *const Ipp8u,
        keyLen: ::std::os::raw::c_int,
        pIsWeak: *mut IppBool::Type,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsARCFourGetSize(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsARCFourInit(
        pKey: *const Ipp8u,
        keyLen: ::std::os::raw::c_int,
        pCtx: *mut IppsARCFourState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsARCFourReset(pCtx: *mut IppsARCFourState) -> IppStatus;
}
extern "C" {
    pub fn ippsARCFourPack(pCtx: *const IppsARCFourState, pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsARCFourUnpack(pBuffer: *const Ipp8u, pCtx: *mut IppsARCFourState) -> IppStatus;
}
extern "C" {
    pub fn ippsARCFourEncrypt(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        length: ::std::os::raw::c_int,
        pCtx: *mut IppsARCFourState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsARCFourDecrypt(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        length: ::std::os::raw::c_int,
        pCtx: *mut IppsARCFourState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA1GetSize(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA1Init(pState: *mut IppsSHA1State) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA1Duplicate(
        pSrcState: *const IppsSHA1State,
        pDstState: *mut IppsSHA1State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA1Pack(pState: *const IppsSHA1State, pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA1Unpack(pBuffer: *const Ipp8u, pState: *mut IppsSHA1State) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA1Update(
        pSrc: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pState: *mut IppsSHA1State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA1GetTag(
        pTag: *mut Ipp8u,
        tagLen: Ipp32u,
        pState: *const IppsSHA1State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA1Final(pMD: *mut Ipp8u, pState: *mut IppsSHA1State) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA1MessageDigest(
        pMsg: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pMD: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA224GetSize(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA224Init(pState: *mut IppsSHA224State) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA224Duplicate(
        pSrcState: *const IppsSHA224State,
        pDstState: *mut IppsSHA224State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA224Pack(pState: *const IppsSHA224State, pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA224Unpack(pBuffer: *const Ipp8u, pState: *mut IppsSHA224State) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA224Update(
        pSrc: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pState: *mut IppsSHA224State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA224GetTag(
        pTag: *mut Ipp8u,
        tagLen: Ipp32u,
        pState: *const IppsSHA224State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA224Final(pMD: *mut Ipp8u, pState: *mut IppsSHA224State) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA224MessageDigest(
        pMsg: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pMD: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA256GetSize(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA256Init(pState: *mut IppsSHA256State) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA256Duplicate(
        pSrcState: *const IppsSHA256State,
        pDstState: *mut IppsSHA256State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA256Pack(pState: *const IppsSHA256State, pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA256Unpack(pBuffer: *const Ipp8u, pState: *mut IppsSHA256State) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA256Update(
        pSrc: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pState: *mut IppsSHA256State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA256GetTag(
        pTag: *mut Ipp8u,
        tagLen: Ipp32u,
        pState: *const IppsSHA256State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA256Final(pMD: *mut Ipp8u, pState: *mut IppsSHA256State) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA256MessageDigest(
        pMsg: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pMD: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA384GetSize(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA384Init(pState: *mut IppsSHA384State) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA384Duplicate(
        pSrcState: *const IppsSHA384State,
        pDstState: *mut IppsSHA384State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA384Pack(pState: *const IppsSHA384State, pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA384Unpack(pBuffer: *const Ipp8u, pState: *mut IppsSHA384State) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA384Update(
        pSrc: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pState: *mut IppsSHA384State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA384GetTag(
        pTag: *mut Ipp8u,
        tagLen: Ipp32u,
        pState: *const IppsSHA384State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA384Final(pMD: *mut Ipp8u, pState: *mut IppsSHA384State) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA384MessageDigest(
        pMsg: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pMD: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA512GetSize(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA512Init(pState: *mut IppsSHA512State) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA512Duplicate(
        pSrcState: *const IppsSHA512State,
        pDstState: *mut IppsSHA512State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA512Pack(pState: *const IppsSHA512State, pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA512Unpack(pBuffer: *const Ipp8u, pState: *mut IppsSHA512State) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA512Update(
        pSrc: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pState: *mut IppsSHA512State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA512GetTag(
        pTag: *mut Ipp8u,
        tagLen: Ipp32u,
        pState: *const IppsSHA512State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA512Final(pMD: *mut Ipp8u, pState: *mut IppsSHA512State) -> IppStatus;
}
extern "C" {
    pub fn ippsSHA512MessageDigest(
        pMsg: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pMD: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsMD5GetSize(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsMD5Init(pState: *mut IppsMD5State) -> IppStatus;
}
extern "C" {
    pub fn ippsMD5Duplicate(
        pSrcState: *const IppsMD5State,
        pDstState: *mut IppsMD5State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsMD5Pack(pState: *const IppsMD5State, pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsMD5Unpack(pBuffer: *const Ipp8u, pState: *mut IppsMD5State) -> IppStatus;
}
extern "C" {
    pub fn ippsMD5Update(
        pSrc: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pState: *mut IppsMD5State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsMD5GetTag(
        pTag: *mut Ipp8u,
        tagLen: Ipp32u,
        pState: *const IppsMD5State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsMD5Final(pMD: *mut Ipp8u, pState: *mut IppsMD5State) -> IppStatus;
}
extern "C" {
    pub fn ippsMD5MessageDigest(
        pMsg: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pMD: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSM3GetSize(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsSM3Init(pState: *mut IppsSM3State) -> IppStatus;
}
extern "C" {
    pub fn ippsSM3Duplicate(
        pSrcState: *const IppsSM3State,
        pDstState: *mut IppsSM3State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSM3Pack(pState: *const IppsSM3State, pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsSM3Unpack(pBuffer: *const Ipp8u, pState: *mut IppsSM3State) -> IppStatus;
}
extern "C" {
    pub fn ippsSM3Update(
        pSrc: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pState: *mut IppsSM3State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSM3GetTag(
        pTag: *mut Ipp8u,
        tagLen: Ipp32u,
        pState: *const IppsSM3State,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSM3Final(pMD: *mut Ipp8u, pState: *mut IppsSM3State) -> IppStatus;
}
extern "C" {
    pub fn ippsSM3MessageDigest(
        pMsg: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pMD: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHashGetSize(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsHashInit(pState: *mut IppsHashState, hashAlg: IppHashAlgId::Type) -> IppStatus;
}
extern "C" {
    pub fn ippsHashPack(
        pState: *const IppsHashState,
        pBuffer: *mut Ipp8u,
        bufSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHashUnpack(pBuffer: *const Ipp8u, pState: *mut IppsHashState) -> IppStatus;
}
extern "C" {
    pub fn ippsHashDuplicate(
        pSrcState: *const IppsHashState,
        pDstState: *mut IppsHashState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHashUpdate(
        pSrc: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pState: *mut IppsHashState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHashGetTag(
        pTag: *mut Ipp8u,
        tagLen: ::std::os::raw::c_int,
        pState: *const IppsHashState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHashFinal(pMD: *mut Ipp8u, pState: *mut IppsHashState) -> IppStatus;
}
extern "C" {
    pub fn ippsHashMessage(
        pMsg: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pMD: *mut Ipp8u,
        hashAlg: IppHashAlgId::Type,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHashMethod_MD5() -> *const IppsHashMethod;
}
extern "C" {
    pub fn ippsHashMethod_SM3() -> *const IppsHashMethod;
}
extern "C" {
    pub fn ippsHashMethod_SHA1() -> *const IppsHashMethod;
}
extern "C" {
    pub fn ippsHashMethod_SHA1_NI() -> *const IppsHashMethod;
}
extern "C" {
    pub fn ippsHashMethod_SHA1_TT() -> *const IppsHashMethod;
}
extern "C" {
    pub fn ippsHashMethod_SHA256() -> *const IppsHashMethod;
}
extern "C" {
    pub fn ippsHashMethod_SHA256_NI() -> *const IppsHashMethod;
}
extern "C" {
    pub fn ippsHashMethod_SHA256_TT() -> *const IppsHashMethod;
}
extern "C" {
    pub fn ippsHashMethod_SHA224() -> *const IppsHashMethod;
}
extern "C" {
    pub fn ippsHashMethod_SHA224_NI() -> *const IppsHashMethod;
}
extern "C" {
    pub fn ippsHashMethod_SHA224_TT() -> *const IppsHashMethod;
}
extern "C" {
    pub fn ippsHashMethod_SHA512() -> *const IppsHashMethod;
}
extern "C" {
    pub fn ippsHashMethod_SHA384() -> *const IppsHashMethod;
}
extern "C" {
    pub fn ippsHashMethod_SHA512_256() -> *const IppsHashMethod;
}
extern "C" {
    pub fn ippsHashMethod_SHA512_224() -> *const IppsHashMethod;
}
extern "C" {
    pub fn ippsHashGetSize_rmf(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsHashInit_rmf(
        pState: *mut IppsHashState_rmf,
        pMethod: *const IppsHashMethod,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHashPack_rmf(
        pState: *const IppsHashState_rmf,
        pBuffer: *mut Ipp8u,
        bufSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHashUnpack_rmf(pBuffer: *const Ipp8u, pState: *mut IppsHashState_rmf) -> IppStatus;
}
extern "C" {
    pub fn ippsHashDuplicate_rmf(
        pSrcState: *const IppsHashState_rmf,
        pDstState: *mut IppsHashState_rmf,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHashUpdate_rmf(
        pSrc: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pState: *mut IppsHashState_rmf,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHashGetTag_rmf(
        pMD: *mut Ipp8u,
        tagLen: ::std::os::raw::c_int,
        pState: *const IppsHashState_rmf,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHashFinal_rmf(pMD: *mut Ipp8u, pState: *mut IppsHashState_rmf) -> IppStatus;
}
extern "C" {
    pub fn ippsHashMessage_rmf(
        pMsg: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pMD: *mut Ipp8u,
        pMethod: *const IppsHashMethod,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHashMethodGetInfo(
        pInfo: *mut IppsHashInfo,
        pMethod: *const IppsHashMethod,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHashGetInfo_rmf(
        pInfo: *mut IppsHashInfo,
        pState: *const IppsHashState_rmf,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsMGF(
        pSeed: *const Ipp8u,
        seedLen: ::std::os::raw::c_int,
        pMask: *mut Ipp8u,
        maskLen: ::std::os::raw::c_int,
        hashAlg: IppHashAlgId::Type,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsMGF1_rmf(
        pSeed: *const Ipp8u,
        seedLen: ::std::os::raw::c_int,
        pMask: *mut Ipp8u,
        maskLen: ::std::os::raw::c_int,
        pMethod: *const IppsHashMethod,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsMGF2_rmf(
        pSeed: *const Ipp8u,
        seedLen: ::std::os::raw::c_int,
        pMask: *mut Ipp8u,
        maskLen: ::std::os::raw::c_int,
        pMethod: *const IppsHashMethod,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHMAC_GetSize(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsHMAC_Init(
        pKey: *const Ipp8u,
        keyLen: ::std::os::raw::c_int,
        pCtx: *mut IppsHMACState,
        hashAlg: IppHashAlgId::Type,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHMAC_Pack(
        pCtx: *const IppsHMACState,
        pBuffer: *mut Ipp8u,
        bufSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHMAC_Unpack(pBuffer: *const Ipp8u, pCtx: *mut IppsHMACState) -> IppStatus;
}
extern "C" {
    pub fn ippsHMAC_Duplicate(
        pSrcCtx: *const IppsHMACState,
        pDstCtx: *mut IppsHMACState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHMAC_Update(
        pSrc: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *mut IppsHMACState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHMAC_Final(
        pMD: *mut Ipp8u,
        mdLen: ::std::os::raw::c_int,
        pCtx: *mut IppsHMACState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHMAC_GetTag(
        pMD: *mut Ipp8u,
        mdLen: ::std::os::raw::c_int,
        pCtx: *const IppsHMACState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHMAC_Message(
        pMsg: *const Ipp8u,
        msgLen: ::std::os::raw::c_int,
        pKey: *const Ipp8u,
        keyLen: ::std::os::raw::c_int,
        pMD: *mut Ipp8u,
        mdLen: ::std::os::raw::c_int,
        hashAlg: IppHashAlgId::Type,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHMACGetSize_rmf(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsHMACInit_rmf(
        pKey: *const Ipp8u,
        keyLen: ::std::os::raw::c_int,
        pCtx: *mut IppsHMACState_rmf,
        pMethod: *const IppsHashMethod,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHMACPack_rmf(
        pCtx: *const IppsHMACState_rmf,
        pBuffer: *mut Ipp8u,
        bufSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHMACUnpack_rmf(pBuffer: *const Ipp8u, pCtx: *mut IppsHMACState_rmf) -> IppStatus;
}
extern "C" {
    pub fn ippsHMACDuplicate_rmf(
        pSrcCtx: *const IppsHMACState_rmf,
        pDstCtx: *mut IppsHMACState_rmf,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHMACUpdate_rmf(
        pSrc: *const Ipp8u,
        len: ::std::os::raw::c_int,
        pCtx: *mut IppsHMACState_rmf,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHMACFinal_rmf(
        pMD: *mut Ipp8u,
        mdLen: ::std::os::raw::c_int,
        pCtx: *mut IppsHMACState_rmf,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHMACGetTag_rmf(
        pMD: *mut Ipp8u,
        mdLen: ::std::os::raw::c_int,
        pCtx: *const IppsHMACState_rmf,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsHMACMessage_rmf(
        pMsg: *const Ipp8u,
        msgLen: ::std::os::raw::c_int,
        pKey: *const Ipp8u,
        keyLen: ::std::os::raw::c_int,
        pMD: *mut Ipp8u,
        mdLen: ::std::os::raw::c_int,
        pMethod: *const IppsHashMethod,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsBigNumGetSize(
        length: ::std::os::raw::c_int,
        pSize: *mut ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsBigNumInit(length: ::std::os::raw::c_int, pBN: *mut IppsBigNumState) -> IppStatus;
}
extern "C" {
    pub fn ippsCmpZero_BN(pBN: *const IppsBigNumState, pResult: *mut Ipp32u) -> IppStatus;
}
extern "C" {
    pub fn ippsCmp_BN(
        pA: *const IppsBigNumState,
        pB: *const IppsBigNumState,
        pResult: *mut Ipp32u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGetSize_BN(
        pBN: *const IppsBigNumState,
        pSize: *mut ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSet_BN(
        sgn: IppsBigNumSGN::Type,
        length: ::std::os::raw::c_int,
        pData: *const Ipp32u,
        pBN: *mut IppsBigNumState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGet_BN(
        pSgn: *mut IppsBigNumSGN::Type,
        pLength: *mut ::std::os::raw::c_int,
        pData: *mut Ipp32u,
        pBN: *const IppsBigNumState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRef_BN(
        pSgn: *mut IppsBigNumSGN::Type,
        bitSize: *mut ::std::os::raw::c_int,
        ppData: *mut *mut Ipp32u,
        pBN: *const IppsBigNumState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsExtGet_BN(
        pSgn: *mut IppsBigNumSGN::Type,
        pBitSize: *mut ::std::os::raw::c_int,
        pData: *mut Ipp32u,
        pBN: *const IppsBigNumState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsAdd_BN(
        pA: *mut IppsBigNumState,
        pB: *mut IppsBigNumState,
        pR: *mut IppsBigNumState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSub_BN(
        pA: *mut IppsBigNumState,
        pB: *mut IppsBigNumState,
        pR: *mut IppsBigNumState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsMul_BN(
        pA: *mut IppsBigNumState,
        pB: *mut IppsBigNumState,
        pR: *mut IppsBigNumState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsMAC_BN_I(
        pA: *mut IppsBigNumState,
        pB: *mut IppsBigNumState,
        pR: *mut IppsBigNumState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsDiv_BN(
        pA: *mut IppsBigNumState,
        pB: *mut IppsBigNumState,
        pQ: *mut IppsBigNumState,
        pR: *mut IppsBigNumState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsMod_BN(
        pA: *mut IppsBigNumState,
        pM: *mut IppsBigNumState,
        pR: *mut IppsBigNumState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGcd_BN(
        pA: *mut IppsBigNumState,
        pB: *mut IppsBigNumState,
        pGCD: *mut IppsBigNumState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsModInv_BN(
        pA: *mut IppsBigNumState,
        pM: *mut IppsBigNumState,
        pInv: *mut IppsBigNumState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsSetOctString_BN(
        pStr: *const Ipp8u,
        strLen: ::std::os::raw::c_int,
        pBN: *mut IppsBigNumState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGetOctString_BN(
        pStr: *mut Ipp8u,
        strLen: ::std::os::raw::c_int,
        pBN: *const IppsBigNumState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsMontGetSize(
        method: IppsExpMethod::Type,
        length: ::std::os::raw::c_int,
        pSize: *mut ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsMontInit(
        method: IppsExpMethod::Type,
        length: ::std::os::raw::c_int,
        pCtx: *mut IppsMontState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsMontSet(
        pModulo: *const Ipp32u,
        size: ::std::os::raw::c_int,
        pCtx: *mut IppsMontState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsMontGet(
        pModulo: *mut Ipp32u,
        pSize: *mut ::std::os::raw::c_int,
        pCtx: *const IppsMontState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsMontForm(
        pA: *const IppsBigNumState,
        pCtx: *mut IppsMontState,
        pR: *mut IppsBigNumState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsMontMul(
        pA: *const IppsBigNumState,
        pB: *const IppsBigNumState,
        m: *mut IppsMontState,
        pR: *mut IppsBigNumState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsMontExp(
        pA: *const IppsBigNumState,
        pE: *const IppsBigNumState,
        m: *mut IppsMontState,
        pR: *mut IppsBigNumState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsPRNGGetSize(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsPRNGInit(seedBits: ::std::os::raw::c_int, pCtx: *mut IppsPRNGState) -> IppStatus;
}
extern "C" {
    pub fn ippsPRNGSetModulus(pMod: *const IppsBigNumState, pCtx: *mut IppsPRNGState) -> IppStatus;
}
extern "C" {
    pub fn ippsPRNGSetH0(pH0: *const IppsBigNumState, pCtx: *mut IppsPRNGState) -> IppStatus;
}
extern "C" {
    pub fn ippsPRNGSetAugment(pAug: *const IppsBigNumState, pCtx: *mut IppsPRNGState) -> IppStatus;
}
extern "C" {
    pub fn ippsPRNGSetSeed(pSeed: *const IppsBigNumState, pCtx: *mut IppsPRNGState) -> IppStatus;
}
extern "C" {
    pub fn ippsPRNGGetSeed(pCtx: *const IppsPRNGState, pSeed: *mut IppsBigNumState) -> IppStatus;
}
extern "C" {
    pub fn ippsPRNGen(
        pRand: *mut Ipp32u,
        nBits: ::std::os::raw::c_int,
        pCtx: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsPRNGen_BN(
        pRand: *mut IppsBigNumState,
        nBits: ::std::os::raw::c_int,
        pCtx: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsPRNGenRDRAND(
        pRand: *mut Ipp32u,
        nBits: ::std::os::raw::c_int,
        pCtx: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsPRNGenRDRAND_BN(
        pRand: *mut IppsBigNumState,
        nBits: ::std::os::raw::c_int,
        pCtx: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsTRNGenRDSEED(
        pRand: *mut Ipp32u,
        nBits: ::std::os::raw::c_int,
        pCtx: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsTRNGenRDSEED_BN(
        pRand: *mut IppsBigNumState,
        nBits: ::std::os::raw::c_int,
        pCtx: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsPrimeGetSize(
        nMaxBits: ::std::os::raw::c_int,
        pSize: *mut ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsPrimeInit(nMaxBits: ::std::os::raw::c_int, pCtx: *mut IppsPrimeState) -> IppStatus;
}
extern "C" {
    pub fn ippsPrimeGen(
        nBits: ::std::os::raw::c_int,
        nTrials: ::std::os::raw::c_int,
        pCtx: *mut IppsPrimeState,
        rndFunc: IppBitSupplier,
        pRndParam: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsPrimeTest(
        nTrials: ::std::os::raw::c_int,
        pResult: *mut Ipp32u,
        pCtx: *mut IppsPrimeState,
        rndFunc: IppBitSupplier,
        pRndParam: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsPrimeGen_BN(
        pPrime: *mut IppsBigNumState,
        nBits: ::std::os::raw::c_int,
        nTrials: ::std::os::raw::c_int,
        pCtx: *mut IppsPrimeState,
        rndFunc: IppBitSupplier,
        pRndParam: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsPrimeTest_BN(
        pPrime: *const IppsBigNumState,
        nTrials: ::std::os::raw::c_int,
        pResult: *mut Ipp32u,
        pCtx: *mut IppsPrimeState,
        rndFunc: IppBitSupplier,
        pRndParam: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsPrimeGet(
        pPrime: *mut Ipp32u,
        pLen: *mut ::std::os::raw::c_int,
        pCtx: *const IppsPrimeState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsPrimeGet_BN(pPrime: *mut IppsBigNumState, pCtx: *const IppsPrimeState) -> IppStatus;
}
extern "C" {
    pub fn ippsPrimeSet(
        pPrime: *const Ipp32u,
        nBits: ::std::os::raw::c_int,
        pCtx: *mut IppsPrimeState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsPrimeSet_BN(pPrime: *const IppsBigNumState, pCtx: *mut IppsPrimeState) -> IppStatus;
}
extern "C" {
    pub fn ippsRSA_GetSizePublicKey(
        rsaModulusBitSize: ::std::os::raw::c_int,
        pubicExpBitSize: ::std::os::raw::c_int,
        pKeySize: *mut ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSA_InitPublicKey(
        rsaModulusBitSize: ::std::os::raw::c_int,
        publicExpBitSize: ::std::os::raw::c_int,
        pKey: *mut IppsRSAPublicKeyState,
        keyCtxSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSA_SetPublicKey(
        pModulus: *const IppsBigNumState,
        pPublicExp: *const IppsBigNumState,
        pKey: *mut IppsRSAPublicKeyState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSA_GetPublicKey(
        pModulus: *mut IppsBigNumState,
        pPublicExp: *mut IppsBigNumState,
        pKey: *const IppsRSAPublicKeyState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSA_GetSizePrivateKeyType1(
        rsaModulusBitSize: ::std::os::raw::c_int,
        privateExpBitSize: ::std::os::raw::c_int,
        pKeySize: *mut ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSA_InitPrivateKeyType1(
        rsaModulusBitSize: ::std::os::raw::c_int,
        privateExpBitSize: ::std::os::raw::c_int,
        pKey: *mut IppsRSAPrivateKeyState,
        keyCtxSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSA_SetPrivateKeyType1(
        pModulus: *const IppsBigNumState,
        pPrivateExp: *const IppsBigNumState,
        pKey: *mut IppsRSAPrivateKeyState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSA_GetPrivateKeyType1(
        pModulus: *mut IppsBigNumState,
        pPrivateExp: *mut IppsBigNumState,
        pKey: *const IppsRSAPrivateKeyState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSA_GetSizePrivateKeyType2(
        factorPbitSize: ::std::os::raw::c_int,
        factorQbitSize: ::std::os::raw::c_int,
        pKeySize: *mut ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSA_InitPrivateKeyType2(
        factorPbitSize: ::std::os::raw::c_int,
        factorQbitSize: ::std::os::raw::c_int,
        pKey: *mut IppsRSAPrivateKeyState,
        keyCtxSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSA_SetPrivateKeyType2(
        pFactorP: *const IppsBigNumState,
        pFactorQ: *const IppsBigNumState,
        pCrtExpP: *const IppsBigNumState,
        pCrtExpQ: *const IppsBigNumState,
        pInverseQ: *const IppsBigNumState,
        pKey: *mut IppsRSAPrivateKeyState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSA_GetPrivateKeyType2(
        pFactorP: *mut IppsBigNumState,
        pFactorQ: *mut IppsBigNumState,
        pCrtExpP: *mut IppsBigNumState,
        pCrtExpQ: *mut IppsBigNumState,
        pInverseQ: *mut IppsBigNumState,
        pKey: *const IppsRSAPrivateKeyState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSA_GetBufferSizePublicKey(
        pBufferSize: *mut ::std::os::raw::c_int,
        pKey: *const IppsRSAPublicKeyState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSA_GetBufferSizePrivateKey(
        pBufferSize: *mut ::std::os::raw::c_int,
        pKey: *const IppsRSAPrivateKeyState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSA_Encrypt(
        pPtxt: *const IppsBigNumState,
        pCtxt: *mut IppsBigNumState,
        pKey: *const IppsRSAPublicKeyState,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSA_Decrypt(
        pCtxt: *const IppsBigNumState,
        pPtxt: *mut IppsBigNumState,
        pKey: *const IppsRSAPrivateKeyState,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSA_GenerateKeys(
        pSrcPublicExp: *const IppsBigNumState,
        pModulus: *mut IppsBigNumState,
        pPublicExp: *mut IppsBigNumState,
        pPrivateExp: *mut IppsBigNumState,
        pPrivateKeyType2: *mut IppsRSAPrivateKeyState,
        pScratchBuffer: *mut Ipp8u,
        nTrials: ::std::os::raw::c_int,
        pPrimeGen: *mut IppsPrimeState,
        rndFunc: IppBitSupplier,
        pRndParam: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSA_ValidateKeys(
        pResult: *mut ::std::os::raw::c_int,
        pPublicKey: *const IppsRSAPublicKeyState,
        pPrivateKeyType2: *const IppsRSAPrivateKeyState,
        pPrivateKeyType1: *const IppsRSAPrivateKeyState,
        pScratchBuffer: *mut Ipp8u,
        nTrials: ::std::os::raw::c_int,
        pPrimeGen: *mut IppsPrimeState,
        rndFunc: IppBitSupplier,
        pRndParam: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSAEncrypt_OAEP(
        pSrc: *const Ipp8u,
        srcLen: ::std::os::raw::c_int,
        pLabel: *const Ipp8u,
        labLen: ::std::os::raw::c_int,
        pSeed: *const Ipp8u,
        pDst: *mut Ipp8u,
        pKey: *const IppsRSAPublicKeyState,
        hashAlg: IppHashAlgId::Type,
        pBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSADecrypt_OAEP(
        pSrc: *const Ipp8u,
        pLab: *const Ipp8u,
        labLen: ::std::os::raw::c_int,
        pDst: *mut Ipp8u,
        pDstLen: *mut ::std::os::raw::c_int,
        pKey: *const IppsRSAPrivateKeyState,
        hashAlg: IppHashAlgId::Type,
        pBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSAEncrypt_OAEP_rmf(
        pSrc: *const Ipp8u,
        srcLen: ::std::os::raw::c_int,
        pLabel: *const Ipp8u,
        labLen: ::std::os::raw::c_int,
        pSeed: *const Ipp8u,
        pDst: *mut Ipp8u,
        pKey: *const IppsRSAPublicKeyState,
        pMethod: *const IppsHashMethod,
        pBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSADecrypt_OAEP_rmf(
        pSrc: *const Ipp8u,
        pLab: *const Ipp8u,
        labLen: ::std::os::raw::c_int,
        pDst: *mut Ipp8u,
        pDstLen: *mut ::std::os::raw::c_int,
        pKey: *const IppsRSAPrivateKeyState,
        pMethod: *const IppsHashMethod,
        pBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSAEncrypt_PKCSv15(
        pSrc: *const Ipp8u,
        srcLen: ::std::os::raw::c_int,
        pRndPS: *const Ipp8u,
        pDst: *mut Ipp8u,
        pKey: *const IppsRSAPublicKeyState,
        pBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSADecrypt_PKCSv15(
        pSrc: *const Ipp8u,
        pDst: *mut Ipp8u,
        pDstLen: *mut ::std::os::raw::c_int,
        pKey: *const IppsRSAPrivateKeyState,
        pBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSASign_PSS(
        pMsg: *const Ipp8u,
        msgLen: ::std::os::raw::c_int,
        pSalt: *const Ipp8u,
        saltLen: ::std::os::raw::c_int,
        pSign: *mut Ipp8u,
        pPrvKey: *const IppsRSAPrivateKeyState,
        pPubKey: *const IppsRSAPublicKeyState,
        hashAlg: IppHashAlgId::Type,
        pBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSAVerify_PSS(
        pMsg: *const Ipp8u,
        msgLen: ::std::os::raw::c_int,
        pSign: *const Ipp8u,
        pIsValid: *mut ::std::os::raw::c_int,
        pKey: *const IppsRSAPublicKeyState,
        hashAlg: IppHashAlgId::Type,
        pBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSASign_PSS_rmf(
        pMsg: *const Ipp8u,
        msgLen: ::std::os::raw::c_int,
        pSalt: *const Ipp8u,
        saltLen: ::std::os::raw::c_int,
        pSign: *mut Ipp8u,
        pPrvKey: *const IppsRSAPrivateKeyState,
        pPubKey: *const IppsRSAPublicKeyState,
        pMethod: *const IppsHashMethod,
        pBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSAVerify_PSS_rmf(
        pMsg: *const Ipp8u,
        msgLen: ::std::os::raw::c_int,
        pSign: *const Ipp8u,
        pIsValid: *mut ::std::os::raw::c_int,
        pKey: *const IppsRSAPublicKeyState,
        pMethod: *const IppsHashMethod,
        pBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSASign_PKCS1v15(
        pMsg: *const Ipp8u,
        msgLen: ::std::os::raw::c_int,
        pSign: *mut Ipp8u,
        pPrvKey: *const IppsRSAPrivateKeyState,
        pPubKey: *const IppsRSAPublicKeyState,
        hashAlg: IppHashAlgId::Type,
        pBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSAVerify_PKCS1v15(
        pMsg: *const Ipp8u,
        msgLen: ::std::os::raw::c_int,
        pSign: *const Ipp8u,
        pIsValid: *mut ::std::os::raw::c_int,
        pKey: *const IppsRSAPublicKeyState,
        hashAlg: IppHashAlgId::Type,
        pBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSASign_PKCS1v15_rmf(
        pMsg: *const Ipp8u,
        msgLen: ::std::os::raw::c_int,
        pSign: *mut Ipp8u,
        pPrvKey: *const IppsRSAPrivateKeyState,
        pPubKey: *const IppsRSAPublicKeyState,
        pMethod: *const IppsHashMethod,
        pBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsRSAVerify_PKCS1v15_rmf(
        pMsg: *const Ipp8u,
        msgLen: ::std::os::raw::c_int,
        pSign: *const Ipp8u,
        pIsValid: *mut ::std::os::raw::c_int,
        pKey: *const IppsRSAPublicKeyState,
        pMethod: *const IppsHashMethod,
        pBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsDLGetResultString(code: IppDLResult::Type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ippsDLPGetSize(
        bitSizeP: ::std::os::raw::c_int,
        bitSizeR: ::std::os::raw::c_int,
        pSize: *mut ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsDLPInit(
        bitSizeP: ::std::os::raw::c_int,
        bitSizeR: ::std::os::raw::c_int,
        pCtx: *mut IppsDLPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsDLPPack(pCtx: *const IppsDLPState, pBuffer: *mut Ipp8u) -> IppStatus;
}
extern "C" {
    pub fn ippsDLPUnpack(pBuffer: *const Ipp8u, pCtx: *mut IppsDLPState) -> IppStatus;
}
extern "C" {
    pub fn ippsDLPSet(
        pP: *const IppsBigNumState,
        pR: *const IppsBigNumState,
        pG: *const IppsBigNumState,
        pCtx: *mut IppsDLPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsDLPGet(
        pP: *mut IppsBigNumState,
        pR: *mut IppsBigNumState,
        pG: *mut IppsBigNumState,
        pCtx: *mut IppsDLPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsDLPSetDP(
        pDP: *const IppsBigNumState,
        tag: IppDLPKeyTag::Type,
        pCtx: *mut IppsDLPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsDLPGetDP(
        pDP: *mut IppsBigNumState,
        tag: IppDLPKeyTag::Type,
        pCtx: *const IppsDLPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsDLPGenKeyPair(
        pPrvKey: *mut IppsBigNumState,
        pPubKey: *mut IppsBigNumState,
        pCtx: *mut IppsDLPState,
        rndFunc: IppBitSupplier,
        pRndParam: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsDLPPublicKey(
        pPrvKey: *const IppsBigNumState,
        pPubKey: *mut IppsBigNumState,
        pCtx: *mut IppsDLPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsDLPValidateKeyPair(
        pPrvKey: *const IppsBigNumState,
        pPubKey: *const IppsBigNumState,
        pResult: *mut IppDLResult::Type,
        pCtx: *mut IppsDLPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsDLPSetKeyPair(
        pPrvKey: *const IppsBigNumState,
        pPubKey: *const IppsBigNumState,
        pCtx: *mut IppsDLPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsDLPSignDSA(
        pMsgDigest: *const IppsBigNumState,
        pPrvKey: *const IppsBigNumState,
        pSignR: *mut IppsBigNumState,
        pSignS: *mut IppsBigNumState,
        pCtx: *mut IppsDLPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsDLPVerifyDSA(
        pMsgDigest: *const IppsBigNumState,
        pSignR: *const IppsBigNumState,
        pSignS: *const IppsBigNumState,
        pResult: *mut IppDLResult::Type,
        pCtx: *mut IppsDLPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsDLPSharedSecretDH(
        pPrvKeyA: *const IppsBigNumState,
        pPubKeyB: *const IppsBigNumState,
        pShare: *mut IppsBigNumState,
        pCtx: *mut IppsDLPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsDLPGenerateDSA(
        pSeedIn: *const IppsBigNumState,
        nTrials: ::std::os::raw::c_int,
        pCtx: *mut IppsDLPState,
        pSeedOut: *mut IppsBigNumState,
        pCounter: *mut ::std::os::raw::c_int,
        rndFunc: IppBitSupplier,
        pRndParam: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsDLPValidateDSA(
        nTrials: ::std::os::raw::c_int,
        pResult: *mut IppDLResult::Type,
        pCtx: *mut IppsDLPState,
        rndFunc: IppBitSupplier,
        pRndParam: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsDLPGenerateDH(
        pSeedIn: *const IppsBigNumState,
        nTrials: ::std::os::raw::c_int,
        pCtx: *mut IppsDLPState,
        pSeedOut: *mut IppsBigNumState,
        pCounter: *mut ::std::os::raw::c_int,
        rndFunc: IppBitSupplier,
        pRndParam: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsDLPValidateDH(
        nTrials: ::std::os::raw::c_int,
        pResult: *mut IppDLResult::Type,
        pCtx: *mut IppsDLPState,
        rndFunc: IppBitSupplier,
        pRndParam: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCGetResultString(code: IppECResult::Type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ippsECCPGetSize(
        feBitSize: ::std::os::raw::c_int,
        pSize: *mut ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPGetSizeStd128r1(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPGetSizeStd128r2(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPGetSizeStd192r1(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPGetSizeStd224r1(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPGetSizeStd256r1(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPGetSizeStd384r1(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPGetSizeStd521r1(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPGetSizeStdSM2(pSize: *mut ::std::os::raw::c_int) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPInit(feBitSize: ::std::os::raw::c_int, pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPInitStd128r1(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPInitStd128r2(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPInitStd192r1(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPInitStd224r1(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPInitStd256r1(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPInitStd384r1(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPInitStd521r1(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPInitStdSM2(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPSet(
        pPrime: *const IppsBigNumState,
        pA: *const IppsBigNumState,
        pB: *const IppsBigNumState,
        pGX: *const IppsBigNumState,
        pGY: *const IppsBigNumState,
        pOrder: *const IppsBigNumState,
        cofactor: ::std::os::raw::c_int,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPSetStd(flag: IppECCType, pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPSetStd128r1(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPSetStd128r2(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPSetStd192r1(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPSetStd224r1(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPSetStd256r1(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPSetStd384r1(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPSetStd521r1(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPSetStdSM2(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPBindGxyTblStd192r1(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPBindGxyTblStd224r1(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPBindGxyTblStd256r1(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPBindGxyTblStd384r1(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPBindGxyTblStd521r1(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPBindGxyTblStdSM2(pEC: *mut IppsECCPState) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPGet(
        pPrime: *mut IppsBigNumState,
        pA: *mut IppsBigNumState,
        pB: *mut IppsBigNumState,
        pGX: *mut IppsBigNumState,
        pGY: *mut IppsBigNumState,
        pOrder: *mut IppsBigNumState,
        cofactor: *mut ::std::os::raw::c_int,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPGetOrderBitSize(
        pBitSize: *mut ::std::os::raw::c_int,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPValidate(
        nTrials: ::std::os::raw::c_int,
        pResult: *mut IppECResult::Type,
        pEC: *mut IppsECCPState,
        rndFunc: IppBitSupplier,
        pRndParam: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPPointGetSize(
        feBitSize: ::std::os::raw::c_int,
        pSize: *mut ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPPointInit(
        feBitSize: ::std::os::raw::c_int,
        pPoint: *mut IppsECCPPointState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPSetPoint(
        pX: *const IppsBigNumState,
        pY: *const IppsBigNumState,
        pPoint: *mut IppsECCPPointState,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPSetPointAtInfinity(
        pPoint: *mut IppsECCPPointState,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPGetPoint(
        pX: *mut IppsBigNumState,
        pY: *mut IppsBigNumState,
        pPoint: *const IppsECCPPointState,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPCheckPoint(
        pP: *const IppsECCPPointState,
        pResult: *mut IppECResult::Type,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPComparePoint(
        pP: *const IppsECCPPointState,
        pQ: *const IppsECCPPointState,
        pResult: *mut IppECResult::Type,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPNegativePoint(
        pP: *const IppsECCPPointState,
        pR: *mut IppsECCPPointState,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPAddPoint(
        pP: *const IppsECCPPointState,
        pQ: *const IppsECCPPointState,
        pR: *mut IppsECCPPointState,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPMulPointScalar(
        pP: *const IppsECCPPointState,
        pK: *const IppsBigNumState,
        pR: *mut IppsECCPPointState,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPGenKeyPair(
        pPrivate: *mut IppsBigNumState,
        pPublic: *mut IppsECCPPointState,
        pEC: *mut IppsECCPState,
        rndFunc: IppBitSupplier,
        pRndParam: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPPublicKey(
        pPrivate: *const IppsBigNumState,
        pPublic: *mut IppsECCPPointState,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPValidateKeyPair(
        pPrivate: *const IppsBigNumState,
        pPublic: *const IppsECCPPointState,
        pResult: *mut IppECResult::Type,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPSetKeyPair(
        pPrivate: *const IppsBigNumState,
        pPublic: *const IppsECCPPointState,
        regular: IppBool::Type,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPSharedSecretDH(
        pPrivateA: *const IppsBigNumState,
        pPublicB: *const IppsECCPPointState,
        pShare: *mut IppsBigNumState,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPSharedSecretDHC(
        pPrivateA: *const IppsBigNumState,
        pPublicB: *const IppsECCPPointState,
        pShare: *mut IppsBigNumState,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPSignDSA(
        pMsgDigest: *const IppsBigNumState,
        pPrivate: *const IppsBigNumState,
        pSignX: *mut IppsBigNumState,
        pSignY: *mut IppsBigNumState,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPVerifyDSA(
        pMsgDigest: *const IppsBigNumState,
        pSignX: *const IppsBigNumState,
        pSignY: *const IppsBigNumState,
        pResult: *mut IppECResult::Type,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPSignNR(
        pMsgDigest: *const IppsBigNumState,
        pPrivate: *const IppsBigNumState,
        pSignX: *mut IppsBigNumState,
        pSignY: *mut IppsBigNumState,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPVerifyNR(
        pMsgDigest: *const IppsBigNumState,
        pSignX: *const IppsBigNumState,
        pSignY: *const IppsBigNumState,
        pResult: *mut IppECResult::Type,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPSignSM2(
        pMsgDigest: *const IppsBigNumState,
        pRegPrivate: *const IppsBigNumState,
        pEphPrivate: *const IppsBigNumState,
        pSignR: *mut IppsBigNumState,
        pSignS: *mut IppsBigNumState,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsECCPVerifySM2(
        pMsgDigest: *const IppsBigNumState,
        pRegPublic: *const IppsECCPPointState,
        pSignR: *const IppsBigNumState,
        pSignS: *const IppsBigNumState,
        pResult: *mut IppECResult::Type,
        pEC: *mut IppsECCPState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpGetSize(
        feBitSize: ::std::os::raw::c_int,
        pSize: *mut ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpInitArbitrary(
        pPrime: *const IppsBigNumState,
        primeBitSize: ::std::os::raw::c_int,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpInitFixed(
        primeBitSize: ::std::os::raw::c_int,
        pGFpMethod: *const IppsGFpMethod,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpInit(
        pPrime: *const IppsBigNumState,
        primeBitSize: ::std::os::raw::c_int,
        pGFpMethod: *const IppsGFpMethod,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpMethod_p192r1() -> *const IppsGFpMethod;
}
extern "C" {
    pub fn ippsGFpMethod_p224r1() -> *const IppsGFpMethod;
}
extern "C" {
    pub fn ippsGFpMethod_p256r1() -> *const IppsGFpMethod;
}
extern "C" {
    pub fn ippsGFpMethod_p384r1() -> *const IppsGFpMethod;
}
extern "C" {
    pub fn ippsGFpMethod_p521r1() -> *const IppsGFpMethod;
}
extern "C" {
    pub fn ippsGFpMethod_p256sm2() -> *const IppsGFpMethod;
}
extern "C" {
    pub fn ippsGFpMethod_p256bn() -> *const IppsGFpMethod;
}
extern "C" {
    pub fn ippsGFpMethod_p256() -> *const IppsGFpMethod;
}
extern "C" {
    pub fn ippsGFpMethod_pArb() -> *const IppsGFpMethod;
}
extern "C" {
    pub fn ippsGFpxGetSize(
        pGroundGF: *const IppsGFpState,
        degree: ::std::os::raw::c_int,
        pSize: *mut ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpxInit(
        pGroundGF: *const IppsGFpState,
        extDeg: ::std::os::raw::c_int,
        ppGroundElm: *const *const IppsGFpElement,
        nElm: ::std::os::raw::c_int,
        pGFpMethod: *const IppsGFpMethod,
        pGFpx: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpxInitBinomial(
        pGroundGF: *const IppsGFpState,
        extDeg: ::std::os::raw::c_int,
        pGroundElm: *const IppsGFpElement,
        pGFpMethod: *const IppsGFpMethod,
        pGFpx: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpxMethod_binom2_epid2() -> *const IppsGFpMethod;
}
extern "C" {
    pub fn ippsGFpxMethod_binom3_epid2() -> *const IppsGFpMethod;
}
extern "C" {
    pub fn ippsGFpxMethod_binom2() -> *const IppsGFpMethod;
}
extern "C" {
    pub fn ippsGFpxMethod_binom3() -> *const IppsGFpMethod;
}
extern "C" {
    pub fn ippsGFpxMethod_binom() -> *const IppsGFpMethod;
}
extern "C" {
    pub fn ippsGFpxMethod_com() -> *const IppsGFpMethod;
}
extern "C" {
    pub fn ippsGFpScratchBufferSize(
        nExponents: ::std::os::raw::c_int,
        ExpBitSize: ::std::os::raw::c_int,
        pGFp: *const IppsGFpState,
        pBufferSize: *mut ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpElementGetSize(
        pGFp: *const IppsGFpState,
        pElementSize: *mut ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpElementInit(
        pA: *const Ipp32u,
        lenA: ::std::os::raw::c_int,
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpSetElement(
        pA: *const Ipp32u,
        lenA: ::std::os::raw::c_int,
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpSetElementRegular(
        pBN: *const IppsBigNumState,
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpSetElementOctString(
        pStr: *const Ipp8u,
        strSize: ::std::os::raw::c_int,
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpSetElementRandom(
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
        rndFunc: IppBitSupplier,
        pRndParam: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpSetElementHash(
        pMsg: *const Ipp8u,
        msgLen: ::std::os::raw::c_int,
        pElm: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
        hashID: IppHashAlgId::Type,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpSetElementHash_rmf(
        pMsg: *const Ipp8u,
        msgLen: ::std::os::raw::c_int,
        pElm: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
        pMethod: *const IppsHashMethod,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpCpyElement(
        pA: *const IppsGFpElement,
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpGetElement(
        pA: *const IppsGFpElement,
        pDataA: *mut Ipp32u,
        lenA: ::std::os::raw::c_int,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpGetElementOctString(
        pA: *const IppsGFpElement,
        pStr: *mut Ipp8u,
        strSize: ::std::os::raw::c_int,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpCmpElement(
        pA: *const IppsGFpElement,
        pB: *const IppsGFpElement,
        pResult: *mut ::std::os::raw::c_int,
        pGFp: *const IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpIsZeroElement(
        pA: *const IppsGFpElement,
        pResult: *mut ::std::os::raw::c_int,
        pGFp: *const IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpIsUnityElement(
        pA: *const IppsGFpElement,
        pResult: *mut ::std::os::raw::c_int,
        pGFp: *const IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpConj(
        pA: *const IppsGFpElement,
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpNeg(
        pA: *const IppsGFpElement,
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpInv(
        pA: *const IppsGFpElement,
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpSqrt(
        pA: *const IppsGFpElement,
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpSqr(
        pA: *const IppsGFpElement,
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpAdd(
        pA: *const IppsGFpElement,
        pB: *const IppsGFpElement,
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpSub(
        pA: *const IppsGFpElement,
        pB: *const IppsGFpElement,
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpMul(
        pA: *const IppsGFpElement,
        pB: *const IppsGFpElement,
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpExp(
        pA: *const IppsGFpElement,
        pE: *const IppsBigNumState,
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpMultiExp(
        ppElmA: *const *const IppsGFpElement,
        ppE: *const *const IppsBigNumState,
        nItems: ::std::os::raw::c_int,
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpAdd_PE(
        pA: *const IppsGFpElement,
        pParentB: *const IppsGFpElement,
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpSub_PE(
        pA: *const IppsGFpElement,
        pParentB: *const IppsGFpElement,
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpMul_PE(
        pA: *const IppsGFpElement,
        pParentB: *const IppsGFpElement,
        pR: *mut IppsGFpElement,
        pGFp: *mut IppsGFpState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpGetInfo(pInfo: *mut IppsGFpInfo, pGFp: *const IppsGFpState) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECGetSize(
        pGFp: *const IppsGFpState,
        pSize: *mut ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECInit(
        pGFp: *const IppsGFpState,
        pA: *const IppsGFpElement,
        pB: *const IppsGFpElement,
        pEC: *mut IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECSet(
        pA: *const IppsGFpElement,
        pB: *const IppsGFpElement,
        pEC: *mut IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECSetSubgroup(
        pX: *const IppsGFpElement,
        pY: *const IppsGFpElement,
        pOrder: *const IppsBigNumState,
        pCofactor: *const IppsBigNumState,
        pEC: *mut IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECInitStd128r1(pGFp: *const IppsGFpState, pEC: *mut IppsGFpECState) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECInitStd128r2(pGFp: *const IppsGFpState, pEC: *mut IppsGFpECState) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECInitStd192r1(pGFp: *const IppsGFpState, pEC: *mut IppsGFpECState) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECInitStd224r1(pGFp: *const IppsGFpState, pEC: *mut IppsGFpECState) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECInitStd256r1(pGFp: *const IppsGFpState, pEC: *mut IppsGFpECState) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECInitStd384r1(pGFp: *const IppsGFpState, pEC: *mut IppsGFpECState) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECInitStd521r1(pGFp: *const IppsGFpState, pEC: *mut IppsGFpECState) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECInitStdSM2(pGFp: *const IppsGFpState, pEC: *mut IppsGFpECState) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECInitStdBN256(pGFp: *const IppsGFpState, pEC: *mut IppsGFpECState) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECBindGxyTblStd192r1(pEC: *mut IppsGFpECState) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECBindGxyTblStd224r1(pEC: *mut IppsGFpECState) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECBindGxyTblStd256r1(pEC: *mut IppsGFpECState) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECBindGxyTblStd384r1(pEC: *mut IppsGFpECState) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECBindGxyTblStd521r1(pEC: *mut IppsGFpECState) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECBindGxyTblStdSM2(pEC: *mut IppsGFpECState) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECGet(
        ppGFp: *mut *mut IppsGFpState,
        pA: *mut IppsGFpElement,
        pB: *mut IppsGFpElement,
        pEC: *const IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECGetSubgroup(
        ppGFp: *mut *mut IppsGFpState,
        pX: *mut IppsGFpElement,
        pY: *mut IppsGFpElement,
        pOrder: *mut IppsBigNumState,
        pCofactor: *mut IppsBigNumState,
        pEC: *const IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECScratchBufferSize(
        nScalars: ::std::os::raw::c_int,
        pEC: *const IppsGFpECState,
        pBufferSize: *mut ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECVerify(
        pResult: *mut IppECResult::Type,
        pEC: *mut IppsGFpECState,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECPointGetSize(
        pEC: *const IppsGFpECState,
        pSize: *mut ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECPointInit(
        pX: *const IppsGFpElement,
        pY: *const IppsGFpElement,
        pPoint: *mut IppsGFpECPoint,
        pEC: *mut IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECSetPointAtInfinity(
        pPoint: *mut IppsGFpECPoint,
        pEC: *mut IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECSetPoint(
        pX: *const IppsGFpElement,
        pY: *const IppsGFpElement,
        pPoint: *mut IppsGFpECPoint,
        pEC: *mut IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECSetPointRegular(
        pX: *const IppsBigNumState,
        pY: *const IppsBigNumState,
        pPoint: *mut IppsGFpECPoint,
        pEC: *mut IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECSetPointRandom(
        pPoint: *mut IppsGFpECPoint,
        pEC: *mut IppsGFpECState,
        rndFunc: IppBitSupplier,
        pRndParam: *mut ::std::os::raw::c_void,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECMakePoint(
        pX: *const IppsGFpElement,
        pPoint: *mut IppsGFpECPoint,
        pEC: *mut IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECSetPointHash(
        hdr: Ipp32u,
        pMsg: *const Ipp8u,
        msgLen: ::std::os::raw::c_int,
        pPoint: *mut IppsGFpECPoint,
        pEC: *mut IppsGFpECState,
        hashID: IppHashAlgId::Type,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECSetPointHash_rmf(
        hdr: Ipp32u,
        pMsg: *const Ipp8u,
        msgLen: ::std::os::raw::c_int,
        pPoint: *mut IppsGFpECPoint,
        pEC: *mut IppsGFpECState,
        pMethod: *const IppsHashMethod,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECGetPoint(
        pPoint: *const IppsGFpECPoint,
        pX: *mut IppsGFpElement,
        pY: *mut IppsGFpElement,
        pEC: *mut IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECGetPointRegular(
        pPoint: *const IppsGFpECPoint,
        pX: *mut IppsBigNumState,
        pY: *mut IppsBigNumState,
        pEC: *mut IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECSetPointOctString(
        pStr: *const Ipp8u,
        strLen: ::std::os::raw::c_int,
        pPoint: *mut IppsGFpECPoint,
        pEC: *mut IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECGetPointOctString(
        pPoint: *const IppsGFpECPoint,
        pStr: *mut Ipp8u,
        strLen: ::std::os::raw::c_int,
        pEC: *mut IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECTstPoint(
        pP: *const IppsGFpECPoint,
        pResult: *mut IppECResult::Type,
        pEC: *mut IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECTstPointInSubgroup(
        pP: *const IppsGFpECPoint,
        pResult: *mut IppECResult::Type,
        pEC: *mut IppsGFpECState,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECCpyPoint(
        pA: *const IppsGFpECPoint,
        pR: *mut IppsGFpECPoint,
        pEC: *mut IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECCmpPoint(
        pP: *const IppsGFpECPoint,
        pQ: *const IppsGFpECPoint,
        pResult: *mut IppECResult::Type,
        pEC: *mut IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECNegPoint(
        pP: *const IppsGFpECPoint,
        pR: *mut IppsGFpECPoint,
        pEC: *mut IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECAddPoint(
        pP: *const IppsGFpECPoint,
        pQ: *const IppsGFpECPoint,
        pR: *mut IppsGFpECPoint,
        pEC: *mut IppsGFpECState,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECMulPoint(
        pP: *const IppsGFpECPoint,
        pN: *const IppsBigNumState,
        pR: *mut IppsGFpECPoint,
        pEC: *mut IppsGFpECState,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECPrivateKey(
        pPrivate: *mut IppsBigNumState,
        pEC: *mut IppsGFpECState,
        rndFunc: IppBitSupplier,
        pRndParam: *mut ::std::os::raw::c_void,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECPublicKey(
        pPrivate: *const IppsBigNumState,
        pPublic: *mut IppsGFpECPoint,
        pEC: *mut IppsGFpECState,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECTstKeyPair(
        pPrivate: *const IppsBigNumState,
        pPublic: *const IppsGFpECPoint,
        pResult: *mut IppECResult::Type,
        pEC: *mut IppsGFpECState,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECSharedSecretDH(
        pPrivateA: *const IppsBigNumState,
        pPublicB: *const IppsGFpECPoint,
        pShare: *mut IppsBigNumState,
        pEC: *mut IppsGFpECState,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECSharedSecretDHC(
        pPrivateA: *const IppsBigNumState,
        pPublicB: *const IppsGFpECPoint,
        pShare: *mut IppsBigNumState,
        pEC: *mut IppsGFpECState,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECSignDSA(
        pMsgDigest: *const IppsBigNumState,
        pRegPrivate: *const IppsBigNumState,
        pEphPrivate: *const IppsBigNumState,
        pSignR: *mut IppsBigNumState,
        pSignS: *mut IppsBigNumState,
        pEC: *mut IppsGFpECState,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECVerifyDSA(
        pMsgDigest: *const IppsBigNumState,
        pRegPublic: *const IppsGFpECPoint,
        pSignR: *const IppsBigNumState,
        pSignS: *const IppsBigNumState,
        pResult: *mut IppECResult::Type,
        pEC: *mut IppsGFpECState,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECSignNR(
        pMsgDigest: *const IppsBigNumState,
        pRegPrivate: *const IppsBigNumState,
        pEphPrivate: *const IppsBigNumState,
        pSignR: *mut IppsBigNumState,
        pSignS: *mut IppsBigNumState,
        pEC: *mut IppsGFpECState,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECVerifyNR(
        pMsgDigest: *const IppsBigNumState,
        pRegPublic: *const IppsGFpECPoint,
        pSignR: *const IppsBigNumState,
        pSignS: *const IppsBigNumState,
        pResult: *mut IppECResult::Type,
        pEC: *mut IppsGFpECState,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECSignSM2(
        pMsgDigest: *const IppsBigNumState,
        pRegPrivate: *const IppsBigNumState,
        pEphPrivate: *const IppsBigNumState,
        pSignR: *mut IppsBigNumState,
        pSignS: *mut IppsBigNumState,
        pEC: *mut IppsGFpECState,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECVerifySM2(
        pMsgDigest: *const IppsBigNumState,
        pRegPublic: *const IppsGFpECPoint,
        pSignR: *const IppsBigNumState,
        pSignS: *const IppsBigNumState,
        pResult: *mut IppECResult::Type,
        pEC: *mut IppsGFpECState,
        pScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECGetInfo_GF(pInfo: *mut IppsGFpInfo, pEC: *const IppsGFpECState) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECESGetSize_SM2(
        pEC: *const IppsGFpECState,
        pSize: *mut ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECESInit_SM2(
        pEC: *mut IppsGFpECState,
        pState: *mut IppsECESState_SM2,
        avaliableCtxSize: ::std::os::raw::c_int,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECESSetKey_SM2(
        pPrivate: *const IppsBigNumState,
        pPublic: *const IppsGFpECPoint,
        pState: *mut IppsECESState_SM2,
        pEC: *mut IppsGFpECState,
        pEcScratchBuffer: *mut Ipp8u,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECESStart_SM2(pState: *mut IppsECESState_SM2) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECESEncrypt_SM2(
        pInput: *const Ipp8u,
        pOutput: *mut Ipp8u,
        dataLen: ::std::os::raw::c_int,
        pState: *mut IppsECESState_SM2,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECESDecrypt_SM2(
        pInput: *const Ipp8u,
        pOutput: *mut Ipp8u,
        dataLen: ::std::os::raw::c_int,
        pState: *mut IppsECESState_SM2,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECESFinal_SM2(
        pTag: *mut Ipp8u,
        tagLen: ::std::os::raw::c_int,
        pState: *mut IppsECESState_SM2,
    ) -> IppStatus;
}
extern "C" {
    pub fn ippsGFpECESGetBuffersSize_SM2(
        pPublicKeySize: *mut ::std::os::raw::c_int,
        pMaximumTagSize: *mut ::std::os::raw::c_int,
        pState: *const IppsECESState_SM2,
    ) -> IppStatus;
}
